@page "/calculations/{id:int}"

@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using System.Reflection.Metadata

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime


<h1>Расчет</h1>

@if (calculations == null)
{
	<p><em>Loading...</em></p>
}
else
{
	 <div>
		<button @onclick="this.DownloadFile">
			<span class="btn btn-secondary">Скачать отчет</span>
		</button>
	</div> 

	<div>
		<table class="table">
			<thead>
			<tr>
				<th>Контрагент</th>
				<th>Стоимость 1 ед.</th>
				<th>Экономический эффект</th>
				<th>Оценка надежности</th>
				<th>Интегральная оценка</th>
				<th>Примечания</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var calculation in calculations)
			{
				<tr>
					<td>@calculation.AgentName</td>
					<td>@String.Format("{0:0}",calculation.PositionPrice)</td>
					<td>@String.Format("{0:0.##}",calculation.EconomyEffect)</td>
					<td>@String.Format("{0:0.##}",calculation.ReliabilityAssessment)</td>
					<td>@String.Format("{0:0.##}",calculation.IntegralAssessment)</td>
					<td>@calculation.Note</td>
					<td>
						<button class="btn btn-secondary" @onclick="async () => await SetTenderWinnerAsync(calculation)">
							<span class="btn btn-secondary">Выбрать победителя</span>
						</button>
					</td>
				</tr>
			}
			</tbody>
		</table>

	</div> 
	
	
<style>
    .custom-chart {
        width: 700px; /* Устанавливаем ширину в 300px */
        height: 500px; /* Устанавливаем высоту в 200px */
    }
</style>

	<div class="custom-chart">
		<Chart Config="barConfig"></Chart>
	</div>
	
}



@code{

    [Parameter]
    public int? Id { get; set; }

    private List<Calculation> calculations;
    private BarConfig barConfig;

    protected override async Task OnInitializedAsync()
    {
	    try
	    {
		    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

		    if (string.IsNullOrEmpty(token))
		    {
			    NavigationManager.NavigateTo("/login");
			    return;
		    }

			var repsonseViewModel = await ApiRequests.GetItemAsync<ResponseViewModel<Calculation>>($"api/Calculation/get_calc/{Id}", HttpClient, token);
		    calculations = repsonseViewModel.Items;

			if (calculations.Count == 0)
			{
				return;

			}

			foreach (var calculation in calculations)
			{
				calculation.AgentName = EncodingHelper.ConvertAsciiToUtf8(calculation.AgentName);
				calculation.Note = EncodingHelper.ConvertAsciiToUtf8(calculation.Note);
			}

		    barConfig = CreateBarConfig(this.calculations);

		    await JsRuntime.InvokeVoidAsync("import", "/FileSaver.js");

	    }
	    catch (Exception ex)
	    {
			NavigationManager.NavigateTo("/selection");
	    }

    }

    private BarConfig CreateBarConfig(IEnumerable<Calculation> calculations)
    {

	    var _barConfig = new BarConfig
	    {
		    Options = new BarOptions()
		    {
			    Responsive = true,
			    Title = new OptionsTitle()
			    {
				    Display = true,
				    Text = "Интегральная оценка"
			    } 
		    }
	    };


	    foreach (var calculation in calculations)
	    {
			_barConfig.Data.Labels.Add(calculation.AgentName);
	    }


	    var integralAssessments = this.calculations.Select(x => x.IntegralAssessment).ToList();

	    var dataset = new BarDataset<decimal>(integralAssessments);
	    dataset.BackgroundColor = new IndexableOption<string>("#007bff");


		_barConfig.Data.Datasets.Add(dataset);
		return _barConfig;
    }


    private async Task SetTenderWinnerAsync(Calculation calculation)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    try
	    {
			var proposal = await ApiRequests.GetItemAsync<Proposal>($"api/proposal/{calculation.ProposalId}", HttpClient, token);

		    if (proposal == null)
		    {
			    NavigationManager.NavigateTo("/selection");
			    return;
		    }

			var tender = await ApiRequests.GetItemAsync<Tender>($"api/tender/get_tender/{proposal.Tender.TenderId}", HttpClient, token);


			tender.WinnerProposalId = calculation.ProposalId;

			var result = await ApiRequests.PutItemAsync("api/tender", HttpClient, token, tender);

			NavigationManager.NavigateTo("/selection");
	    }
	    catch (Exception)
	    {
			NavigationManager.NavigateTo("/error");
	    }

    }

    private async Task DownloadFile()
    {
		var token = await LocalStorage.GetItemAsync<string>("AccessToken");

		if (string.IsNullOrEmpty(token))
		{
			NavigationManager.NavigateTo("/login");
			return;
		}


		var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"api/excel/{Id}");

	    requestMessage.Headers.Authorization
		    = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

	    var response = await HttpClient.SendAsync(requestMessage);


	   // var response = await httpClient.GetAsync("https://your-api-url/api/excel?id=1"); // замените URL на фактический URL вашего API и укажите правильный идентификатор файла

	    if (response.IsSuccessStatusCode)
	    {
		    var contentBytes = await response.Content.ReadAsByteArrayAsync();
		    var fileName = $"{Id}.xls";

		    await JsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(contentBytes));
	    }
	    else
	    {
			NavigationManager.NavigateTo("/selection");
	    }
    }


    public static async Task<T> GetItemAsync<T>(string path, HttpClient httpClient, string token)
    {

	    var requestMessage = new HttpRequestMessage(HttpMethod.Get, path);

	    requestMessage.Headers.Authorization
		    = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

	    var responce = await httpClient.SendAsync(requestMessage);

	    var result = await responce.Content.ReadAsStringAsync();

	    return JsonSerializer.Deserialize<T>(result);
    }
}



