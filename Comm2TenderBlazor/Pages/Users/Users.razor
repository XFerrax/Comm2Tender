@page "/users"
@using Comm2TenderBlazor.Models.Dto
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage

<PageTitle>Пользователи</PageTitle>

<h1>Пользователи</h1>


@if (users == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="mb-3">
		<input class="form-control mb-3" type="text" @bind="searchText" placeholder="Enter search query" />
		<button class="btn btn-primary" @onclick="SearchUsers">Поиск</button>
	</div>

	<button class="btn btn-primary" @onclick="AddUser">Добавить пользователя</button>

	<table class="table">
		<thead>
		<tr>
			<th>ID Пользователя</th>
			<th>ФИО</th>
			<th>E-mail</th>
			<th>Роль</th>
			<th>Активация</th>
			<th>Действия</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var user in users)
		{
			<tr>
				<td>@user.UserId</td>
				<td>@user.Name</td>
				<td>@user.Email</td>
				<td>@user.Role.Name</td>
				<td >@user.IsActive</td>
				<td>
					<button class="btn btn-secondary" @onclick="() => UpdateUser(user)">
						<span class="btn btn-secondary">Редактировать</span>
					</button>
					<button @onclick="() => DeleteUser(user.UserId)">Удалить</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}




@code {
	private bool hasAccess; 

    private List<User> users;
    private string searchText;

    private const string PageTitle = "Пользователи";

    protected override async Task OnInitializedAsync()
    {
        try
        {
	        var token = await LocalStorage.GetItemAsync<string>("AccessToken");

			if (string.IsNullOrEmpty(token))
	        {
				NavigationManager.NavigateTo("/login");
				return;
	        }

            users = await ApiRequests.PostAllListAsync<User>("api/user/search", HttpClient, token);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async Task SearchUsers()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");
        users = await ApiRequests.SearchAsync<User>(searchText, "api/user/Search", HttpClient, token);
    }

    private async Task AddUser()
    {
        NavigationManager.NavigateTo("/user/0");
    }

    private async Task UpdateUser(User user)
    {
        NavigationManager.NavigateTo($"/user/{user.UserId}");
    }

    private async Task DeleteUser(int userId)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    await ApiRequests.DeleteItemAsync($"api/user/delete_user/{userId}", HttpClient, token);

        users = await ApiRequests.PostAllListAsync<User>("api/user/Search", HttpClient, token);
    }
}