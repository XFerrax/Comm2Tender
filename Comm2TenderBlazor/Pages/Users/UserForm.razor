@page "/user/{id:int}"
@using Comm2TenderBlazor.Models.Dto
@using System.Security.Cryptography

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (user != null && roles != null)
{
     <div class="row">
        <div class="col">
	        <EditForm Model="@user" OnValidSubmit="() => HandleSubmit(user)">
		        <DataAnnotationsValidator />
		        <ValidationSummary />

		        <div >
			        <label class="form-label">ФИО:</label>
			        <InputText @bind-Value="user.Name" class="form-control"></InputText>
		        </div>
		        <div>
			        <label class="form-label">СНИЛС:</label>
			        <InputText @bind-Value="user.Email" class="form-control" ></InputText>
		        </div>
		        <div>
			        <label class="form-label">Пароль:</label>
					<InputText @bind-Value="user.Password" class="form-control" type="password" ></InputText>
		        </div>
		        <div>
			        <label class="form-label">Роль:</label>
			        <select class="form-select" @bind="@user.Role.RoleId">
				        @if (roles != null)
				        {
					        @foreach (var role in roles)
					        {
						        <option value="@role.RoleId">@role.Name</option>
					        }
				        }
			        </select>
		        </div>
		        <div>
			        <label class="form-label">Активация учетной записи</label>
			        <input type="checkbox" id="roleUser" @bind="user.IsActive" class="form-check-input">
		        </div>
                
		        @if (Id == 0)
		        {
			        <button class="btn btn-secondary" type="submit">Добавить</button>
		        }
		        else
		        {
					<button class="btn btn-secondary" type="submit">Обновить</button>
		        }
	        </EditForm>
			<br/>
	        <button class="btn btn-danger" @onclick="this.Back">Отмена</button>
        </div>
    </div>  
}


@code {

    [Parameter]
    public int? Id { get; set; }

    private string title = "";
    private bool firsRenderer = true;
    private User? user;
    private List<Role>? roles;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

        if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        try
        {
            if (Id != 0)
            {

	            user = await ApiRequests.GetItemAsync<User>($"api/user/get_user/{Id}", HttpClient, token);

	            user.Name = EncodingHelper.ConvertAsciiToUtf8(user.Name);
	            user.Email = EncodingHelper.ConvertAsciiToUtf8(user.Email);

                title = user.Name;
            }
            else
            {
                title = "Новый пользователь";

                user = new User();
                user.Name = string.Empty;
                user.Email = string.Empty;
                user.Password = string.Empty;
                user.Role = new Role();
                user.Role.Name = string.Empty;
            }
            
            roles = await ApiRequests.PostAllListAsync<Role>("api/role/search", HttpClient, token);

            isLoading = false;
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async Task HandleSubmit(User user)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
	    }

        if (user.UserId == 0)
        {
	        user.Password = GetPasswordHash(user.Password);

            var success = await ApiRequests.PostItemAsync("api/user", HttpClient, token, user);

            NavigationManager.NavigateTo("/users", forceLoad: true);
        }
        else
        {

	        user.Password = GetPasswordHash(user.Password);

	        if (token == null)
	        {
		        NavigationManager.NavigateTo("/login");
	        }

	        await ApiRequests.PutItemAsync("api/user", HttpClient, token, user);

            NavigationManager.NavigateTo("/users", forceLoad: true);
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/users", forceLoad: true);
    }

    private string GetPasswordHash(string password)
    {
	    byte[] hash;
	    using (SHA512 shaM = SHA512.Create())
	    {
		    hash = shaM.ComputeHash(Encoding.UTF8.GetBytes(password));
	    }

	    return BitConverter.ToString(hash).Replace("-", "");
    }

}