@page "/proposals"
@using Comm2TenderBlazor.Models.Dto


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>@PageTitle</PageTitle>

<h1>Заявки</h1>


@if (proposals == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <input class="form-control mb-3" type="text" @bind="searchText" placeholder="Enter search query" />
        <button class="btn btn-primary" @onclick="Search">Поиск</button>
    </div>
    
    <button class="btn btn-primary" @onclick="Add">Добавить</button>

    <table class="table">
        <thead>
            <tr>
                <th>Тендер</th>
                <th>Контрагент</th>
                <th>Количество товара</th>
                <th>Стоимость 1 ед</th>
                <th>Стоимость доставки</th>
                <th>Срок поставки</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proposal in proposals)
            {
                <tr>
                    <td>@proposal.Tender.Number</td>
                    <td>@proposal.Agent.Name</td>
                    <td>@proposal.CountPos</td>
                    <td>@proposal.PositionPrice</td>
                    <td>@proposal.DeliveryCost</td>
                    <td>@proposal.DeliveryTime</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => Update(proposal)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => Delete(proposal.ProposalId)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //[CascadingParameter] public IModalService Modal { get; set; }

    private List<Proposal> proposals;
    private string searchText;

    private const string PageTitle = "Заявки";

    protected override async Task OnInitializedAsync()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

        if (string.IsNullOrEmpty(token))
	    {
            NavigationManager.NavigateTo("/login");
            return;
	    }

        try
        {
            proposals = await ApiRequests.PostAllListAsync<Proposal>("api/proposal/Search", HttpClient, token);

            foreach (var proposal in proposals)
            {
	            proposal.Tender.Number = EncodingHelper.ConvertAsciiToUtf8(proposal.Tender.Number);
                proposal.Agent.Name = EncodingHelper.ConvertAsciiToUtf8(proposal.Agent.Name);
            }
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }

    }

    private async Task Search()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }
        proposals = await ApiRequests.SearchAsync<Proposal>(searchText, "api/proposal/Search", HttpClient, token);
    }

    private async Task Add()
    {
        NavigationManager.NavigateTo("/proposal/0");
    }

    private async Task Update(Proposal model)
    {
        NavigationManager.NavigateTo($"/proposal/{model.ProposalId}");
    }

    private async Task Delete(int id)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    await ApiRequests.DeleteItemAsync($"api/proposal/{id}", HttpClient, token);

        proposals = await ApiRequests.PostAllListAsync<Proposal>("api/proposal/Search", HttpClient, token);
    }

}    