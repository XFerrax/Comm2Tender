@page "/percents"
@using Comm2TenderBlazor.Models.Dto

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Процентные ставки</PageTitle>

<h1>Процентные ставки</h1>


@if (percents == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="Add">Добавить</button>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Ставка ЦБ</th>
                <th>% ТМК</th>
                <th>Банковская гарантия</th>
                <th>Кредит</th>
                <th>Таможенная пошлина</th>
                <th>Скидка</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var percent in percents)
            {
                <tr>
                    <td>@percent.PercentsDictionaryId</td>
                    <td>@percent.RefinancingRate</td>
                    <td>@percent.Tmk</td>
                    <td>@percent.BankGuarantee</td>
                    <td>@percent.Credit</td>
                    <td>@percent.CustomDuty</td>
                    <td>@percent.Discount</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="async () => await Update(percent)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => Delete(percent.PercentsDictionaryId)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<PercentsDictionary> percents;
    private string searchText;

    protected override async Task OnInitializedAsync()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        try
        {
            percents = await ApiRequests.PostAllListAsync<PercentsDictionary>("api/percentsDictionary/Search", HttpClient, token);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }

    }

    private async Task Search()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        percents = await ApiRequests.SearchAsync<PercentsDictionary>(searchText, "api/percentsDictionary/Search", HttpClient, token);
    }

    private async Task Add()
    {
        NavigationManager.NavigateTo("/percent/0");
    }

    private async Task Update(PercentsDictionary model)
    {
        NavigationManager.NavigateTo($"/percent/{model.PercentsDictionaryId}");
    }

    private async Task Delete(int id)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    await ApiRequests.DeleteItemAsync($"api/percentsDictionary/delete_percents/{id}", HttpClient, token);

        percents = await ApiRequests.PostAllListAsync<PercentsDictionary>("api/percentsDictionary/Search", HttpClient, token);
    }
}    