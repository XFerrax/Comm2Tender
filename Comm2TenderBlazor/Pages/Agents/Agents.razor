@page "/agents"


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<PageTitle>Контрагенты</PageTitle>

<h1>Контрагенты</h1>


@if (agents == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <input class="form-control mb-3" type="text" @bind="searchText" placeholder="Enter search query" />
        <button class="btn btn-primary" @onclick="Search">Поиск</button>
    </div>
    
    <button class="btn btn-primary" @onclick="Add">Добавить контрагента</button>

    <table class="table">
        <thead>
            <tr>
                <th>ID агента</th>
                <th>Название</th>
                <th>ИНН</th>
                <th>КПП</th>
                <th>ОГРН</th>
                <th>Дата регистрации</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var agent in agents)
            {
                <tr>
                    <td>@agent.AgentId</td>
                    <td>@agent.Name.</td>
                    <td>@agent.INN</td>
                    <td>@agent.KPP</td>
                    <td>@agent.OGRN</td>
                    <td>@agent.AgentRegistrationDate</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => Update(agent)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => Delete(agent.AgentId)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Agent> agents;
    private string searchText;

    private const string PageTitle = "Пользователи";

    protected override async Task OnInitializedAsync()
    {
        try
        {
	        var token = await LocalStorage.GetItemAsync<string>("AccessToken");

            if (string.IsNullOrEmpty(token))
	        {
                NavigationManager.NavigateTo("/login");
                return;
	        }

            agents = await ApiRequests.PostAllListAsync<Agent>("api/agent/Search", HttpClient, token);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }

    }

    private async Task Search()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        agents = await ApiRequests.SearchAsync<Agent>(searchText, "api/agent/Search", HttpClient, token);

        foreach (var agent in agents)
        {
	        agent.Name = EncodingHelper.ConvertAsciiToUtf8(agent.Name);
        }
    }

    private async Task Add()
    {
        NavigationManager.NavigateTo("/agent/0");
    }

    private async Task Update(Agent agent)
    {

        NavigationManager.NavigateTo($"/agent/{agent.AgentId}");
    }

    private async Task Delete(int id)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (string.IsNullOrEmpty(token))
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    await ApiRequests.DeleteItemAsync($"api/agent/delete_agent/{id}", HttpClient, token);
        agents = await ApiRequests.PostAllListAsync<Agent>("api/agent/Search", HttpClient, token);
    }
}    