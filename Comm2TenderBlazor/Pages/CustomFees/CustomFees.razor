@page "/custom_fees"
@using Comm2TenderBlazor.Models.Dto

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


<PageTitle>Таможенные пошлины</PageTitle>

<h1>Таможенные пошлины</h1>


@if (customFees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <div class="mb-3">
        <input class="form-control mb-3" type="text" @bind="searchText" placeholder="Enter search query" />
        <button class="btn btn-primary" @onclick="Search">Поиск</button>
    </div> *@

    <button class="btn btn-primary" @onclick="Add">Добавить</button>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Минимальный порог</th>
                <th>Пошлина</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customFee in customFees)
            {
                <tr>
                    <td>@customFee.CustomFeeDictionaryId</td>
                    <td>@customFee.MinAmount</td>
                    <td>@customFee.SummaryCustomFee</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => Update(customFee)">
                            <span class="btn btn-secondary">Редактировать</span>
                        </button>
                        <button @onclick="() => Delete(customFee.CustomFeeDictionaryId)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //[CascadingParameter] public IModalService Modal { get; set; }

    private List<CustomFeeDictionary> customFees;
    private string searchText;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customFees = await PagesHelper.GetAllListAsync<CustomFeeDictionary>("api/customFeeDictionary/Search", HttpClient);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }

    }

    private async Task Search()
    {
        customFees = await PagesHelper.SearchAsync<CustomFeeDictionary>(searchText, "api/customFeeDictionary/Search", HttpClient);
    }

    private async Task Add()
    {
        // var modalParameters = new ModalParameters();
        // modalParameters.Add("Id", 0);

        // Modal.Show<UserForm>("Новый пользователь", modalParameters);

        NavigationManager.NavigateTo("/custom_fee/0");
    }

    private async Task Update(CustomFeeDictionary model)
    {
        // var modalParameters = new ModalParameters();
        // modalParameters.Add("Id", user.UserId);

        // Modal.Show<UserForm>(user.Name, modalParameters);

        NavigationManager.NavigateTo($"/custom_fee/{model.CustomFeeDictionaryId}");
    }

    private async Task Delete(int id)
    {
        await HttpClient.DeleteAsync($"api/customFeeDictionary/delete_fee/{id}");
        customFees = await PagesHelper.GetAllListAsync<CustomFeeDictionary>("api/customFeeDictionary/Search", HttpClient);
    }
}    