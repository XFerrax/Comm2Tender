@page "/custom_fee/{id:int}"
@using Comm2TenderBlazor.Models.Dto

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<h1>@title</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
	        <EditForm Model="@customFee" OnValidSubmit="() => HandleSubmit(customFee)">
		        <DataAnnotationsValidator />
		        <ValidationSummary />
		        <div>
			        <label class="form-label">Минимальный порог:</label>
			        <InputNumber @bind-Value="customFee.MinAmount" class="form-control"></InputNumber>
		        </div>
		        <div>
			        <label class="form-label">Пошлина:</label>
			        <InputNumber @bind-Value="customFee.SummaryCustomFee" class="form-control"></InputNumber>
		        </div>

		        @if (Id == 0)
		        {
			        <button class="btn-info" type="submit">Добавить</button>
		        }
		        else
		        {
			        <button class="btn-info" type="submit">Обновить</button>
		        }

	        </EditForm>
			
	        <button class="btn-warning" @onclick="Back">Отмена</button>
        </div>
    </div>
}


@code {

    [Parameter]
    public int? Id { get; set; }

    private string title = "";

    private CustomFeeDictionary? customFee;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        try
        {
            if (Id != 0)
            {
	            customFee = await ApiRequests.GetItemAsync<CustomFeeDictionary>($"api/customFeeDictionary/get_fee/{Id}", HttpClient, token);

                title = "Изменение пошлины";
            }
            else
            {
                title = "Новая пошлина";

                customFee = new CustomFeeDictionary();
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async Task HandleSubmit(CustomFeeDictionary fee)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    if (fee.CustomFeeDictionaryId == 0)
	    {
		    await ApiRequests.PostItemAsync("api/customFeeDictionary", this.HttpClient, token, fee);
		    this.NavigationManager.NavigateTo("/custom_fees");
	    }
	    else
	    {
		    await ApiRequests.PutItemAsync("api/customFeeDictionary", this.HttpClient, token, fee);

		    this.NavigationManager.NavigateTo("/custom_fees");
	    }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/custom_fees");
    }

}