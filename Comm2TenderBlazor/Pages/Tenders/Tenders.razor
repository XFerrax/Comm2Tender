@page "/tenders"
@using Comm2TenderBlazor.Models.Dto


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Тендеры</PageTitle>

<h1>Тендеры</h1>


@if (tenders == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<div class="container">
		<div class="mb-3">
			<input class="form-control mb-3" type="text" @bind="searchText" placeholder="Enter search query" />
			<button class="btn btn-primary" @onclick="Search">Поиск</button>
		</div>
	</div>
    
	<div class="container">
		<button class="btn btn-primary" @onclick="Add">Добавить</button>

		<InputFile></InputFile>
	</div>
    

    <table class="table">
        <thead>
            <tr>
                <th>ID тендера</th>
                <th>СОМ номер</th>
                <th>Описание</th>
                <th>Контрагент победитель</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tender in tenders)
            {
                <tr>
                    <td>@tender.TenderId</td>
                    <td>@tender.Number</td>
                    <td>@tender.Discription</td>
                    <td>@tender.WinnerProposal?.Agent.Name</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => Update(tender)">Редактировать</button>
                        <button class="btn btn-danger"  @onclick="() => Delete(tender.TenderId)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //[CascadingParameter] public IModalService Modal { get; set; }

    private List<Tender> tenders;
    private Proposal winnerProposal;
    private string searchText;

    private const string PageTitle = "Пользователи";

    protected override async Task OnInitializedAsync()
    {
        try
        {
	        var token = await LocalStorage.GetItemAsync<string>("AccessToken");

            if (token == null)
	        {
                NavigationManager.NavigateTo("/login");
                return;
	        }

            tenders = await ApiRequests.PostAllListAsync<Tender>("api/tender/Search", HttpClient, token);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }

    }

    private async Task Search()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        tenders = await ApiRequests.SearchAsync<Tender>(searchText, "api/tender/Search", HttpClient, token);
    }

    private async Task Add()
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        NavigationManager.NavigateTo("/tender/0");
    }

    private async Task Update(Tender model)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

        NavigationManager.NavigateTo($"/tender/{model.TenderId}");
    }

    private async Task Delete(int id)
    {
	    var token = await LocalStorage.GetItemAsync<string>("AccessToken");

	    if (token == null)
	    {
		    NavigationManager.NavigateTo("/login");
		    return;
	    }

	    await ApiRequests.DeleteItemAsync($"api/tender/delete_tender/{id}", HttpClient, token);

        tenders = await ApiRequests.PostAllListAsync<Tender>("api/tender/Search", HttpClient, token);
    }
}
